{"version":3,"sources":["components/Ship/Ship.js","components/Board/Board.js","components/Player/Player.js","App.js","index.js"],"names":["Ship","name","length","id","this","points","Array","fill","hit","point","isSunk","every","Board","player","target","y","x","pointHit","place","orient","ship","checkPoints","console","log","i","push","toString","Player","score","sunkShip","hasWon","App","props","state","currentShip","placementOrientation","shipsPlaced","shipPlaceCount","humAircraftCarrier","humBattleShip","humCruiser","humSubmarine","humDestroyer","comAircraftCarrier","comBattleShip","comCruiser","comSubmarine","comDestroyer","comBoard","humBoard","computer","human","shotsFired","humShipsSunk","comShipsSunk","message","gameOver","setup","bind","humBoardClick","comBoardClick","toggleOrientation","comTurn","tallySunkShip","fire","winner","showResult","setState","comShips","humShips","forEach","placed","Math","floor","random","event","parseInt","getAttribute","comBoardContainer","document","getElementById","classList","add","setTimeout","remove","humShipsSunkDisplay","comShipsSunkDisplay","window","success","board","aircraftCarrier","battleship","cruiser","submarine","destroyer","shipId","split","shipPoint","winnerMessage","className","icon","faFireAlt","size","faCrosshairs","location","reload","onClick","map","row","j","coord","refresh","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.74176e35.chunk.js","sourcesContent":["class Ship {\n  constructor(name, length, id) {\n    this.name = name;\n    this.length = length;\n    this.points = new Array(length).fill(0);\n    this.id = id;\n\n    this.hit = (point) => {\n      this.points[point] = 1;\n    };\n\n    this.isSunk = () => {\n      if (this.points.every((point) => point === 1)) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n  }\n}\n\nexport default Ship;\n","class Board {\n  constructor(player) {\n    this.player = player;\n\n    this.points = [\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n    ];\n\n    this.target = (y, x) => {\n      let pointHit = 0;\n\n      // check if targeted point has already been targeted\n      if (this.points[y][x] === 1 || this.points[y][x] === 2) {\n        return false;\n      } else {\n        // check if a ship is hit and return point hit\n        if (this.points[y][x] !== 0) {\n          pointHit = this.points[y][x];\n          this.points[y][x] = 2;\n        } else {\n          this.points[y][x] = 1;\n        }\n\n        return pointHit;\n      }\n    };\n\n    this.place = (y, x, orient, ship) => {\n      const { length, name } = ship;\n      const checkPoints = [];\n\n      // checks if placement is horizontal\n      if (orient === \"h\") {\n        // checks if Ship will fit on Board\n        if (x + length > 8) {\n          console.log(`${name} horizontal won't fit`);\n          return false;\n        } else {\n          for (let i = 0; i < length; i++) {\n            checkPoints.push(this.points[y][x + i]);\n          }\n        }\n\n        // checks if Ship will overlap another Ship\n        if (!checkPoints.every((point) => point === 0)) {\n          console.log(`${name} horiz overlap`);\n          return false;\n        } else {\n          // get a view of the points to be covered by Ship\n          for (let i = 0; i < length; i++) {\n            this.points[y][x + i] = ship.id + i.toString();\n          }\n          return true;\n        }\n\n        // below is for vertical placement\n      } else {\n        // checks if Ship will fit on Board\n        if (y + length > 8) {\n          console.log(`${name} vertical won't fit`);\n          return false;\n        } else {\n          // get a view of the points to be covered by Ship\n          for (let i = 0; i < length; i++) {\n            checkPoints.push(this.points[y + i][x]);\n          }\n        }\n        // checks if Ship will overlap another Ship\n        if (!checkPoints.every((point) => point === 0)) {\n          console.log(`${name} vert overlap`);\n          return false;\n        } else {\n          //assigns ship.id and ship.points index to board.points\n          for (let i = 0; i < length; i++) {\n            this.points[y + i][x] = ship.id + i.toString();\n          }\n          return true;\n        }\n      }\n    };\n  }\n}\n\nexport default Board;\n","class Player {\n  constructor(name) {\n    this.name = name;\n    this.score = 0;\n    this.sunkShip = () => {\n      this.score++;\n    }\n    this.hasWon = () => {\n      if (this.score === 5) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n\n}\n\nexport default Player;","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Ship from \"./components/Ship/Ship.js\";\nimport Board from \"./components/Board/Board.js\";\nimport Player from \"./components/Player/Player\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFireAlt, faCrosshairs } from \"@fortawesome/free-solid-svg-icons\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentShip: \"\",\n      placementOrientation: \"h\",\n      shipsPlaced: false,\n      shipPlaceCount: 0,\n      humAircraftCarrier: new Ship(\"Aircraft Carrier\", 5, \"a\"),\n      humBattleShip: new Ship(\"Battleship\", 4, \"b\"),\n      humCruiser: new Ship(\"Cruiser\", 3, \"c\"),\n      humSubmarine: new Ship(\"Submarine\", 3, \"s\"),\n      humDestroyer: new Ship(\"Destroyer\", 2, \"d\"),\n      comAircraftCarrier: new Ship(\"Aircraft Carrier\", 5, \"a\"),\n      comBattleShip: new Ship(\"Battleship\", 4, \"b\"),\n      comCruiser: new Ship(\"Cruiser\", 3, \"c\"),\n      comSubmarine: new Ship(\"Submarine\", 3, \"s\"),\n      comDestroyer: new Ship(\"Destroyer\", 2, \"d\"),\n      comBoard: new Board(\"computer\"),\n      humBoard: new Board(\"human\"),\n      computer: new Player(\"computer\"),\n      human: new Player(\"human\"),\n      shotsFired: 0,\n      humShipsSunk: [],\n      comShipsSunk: [],\n      message: \"Choose a target.\",\n      gameOver: false,\n    };\n\n    this.setup = this.setup.bind(this);\n    this.humBoardClick = this.humBoardClick.bind(this);\n    this.comBoardClick = this.comBoardClick.bind(this);\n    this.toggleOrientation = this.toggleOrientation.bind(this);\n    this.comTurn = this.comTurn.bind(this);\n    this.tallySunkShip = this.tallySunkShip.bind(this);\n    this.fire = this.fire.bind(this);\n    this.winner = this.winner.bind(this);\n    this.showResult = this.showResult.bind(this);\n  }\n\n  toggleOrientation() {\n    this.state.placementOrientation === \"h\"\n      ? this.setState({ placementOrientation: \"v\" })\n      : this.setState({ placementOrientation: \"h\" });\n  }\n\n  setup() {\n    const comShips = [\n      this.state.comAircraftCarrier,\n      this.state.comBattleShip,\n      this.state.comCruiser,\n      this.state.comSubmarine,\n      this.state.comDestroyer,\n    ];\n\n    const humShips = [\n      this.state.humAircraftCarrier,\n      this.state.humBattleShip,\n      this.state.humCruiser,\n      this.state.humSubmarine,\n      this.state.humDestroyer,\n    ];\n\n    comShips.forEach((ship) => {\n      let placed = true;\n      do {\n        placed = this.state.comBoard.place(\n          Math.floor(Math.random() * 8),\n          Math.floor(Math.random() * 8),\n          Math.random() < 0.5 ? \"h\" : \"v\",\n          ship\n        );\n      } while (placed === false);\n    });\n\n    this.setState({ currentShip: humShips[this.state.shipPlaceCount].name });\n  }\n\n  humBoardClick(event) {\n    const y = parseInt(event.target.getAttribute(\"coord\")[0]),\n      x = parseInt(event.target.getAttribute(\"coord\")[2]),\n      {\n        shipPlaceCount,\n        humBoard,\n        placementOrientation,\n        humAircraftCarrier,\n        humBattleShip,\n        humCruiser,\n        humSubmarine,\n        humDestroyer,\n      } = this.state;\n\n    const humShips = [\n      humAircraftCarrier,\n      humBattleShip,\n      humCruiser,\n      humSubmarine,\n      humDestroyer,\n      { name: \"\" },\n    ];\n\n    if (shipPlaceCount < 5) {\n      if (\n        humBoard.place(y, x, placementOrientation, humShips[shipPlaceCount]) ===\n        true\n      ) {\n        this.setState({\n          shipPlaceCount: shipPlaceCount + 1,\n          currentShip: humShips[shipPlaceCount + 1].name,\n        });\n      }\n    }\n  }\n\n  comBoardClick(event) {\n    const y = parseInt(event.target.getAttribute(\"coord\")[0]),\n      x = parseInt(event.target.getAttribute(\"coord\")[2]),\n      comBoardContainer = document.getElementById(\"com-board-container\");\n\n    const {\n      comAircraftCarrier,\n      comBattleShip,\n      comCruiser,\n      comSubmarine,\n      comDestroyer,\n    } = this.state;\n\n    this.fire(\n      y,\n      x,\n      this.state.comBoard,\n      comAircraftCarrier,\n      comBattleShip,\n      comCruiser,\n      comSubmarine,\n      comDestroyer\n    );\n\n    event.target.classList.add(\"unclickable\");\n\n    this.setState({ message: \"Computer turn\" });\n    comBoardContainer.classList.add(\"unclickable\");\n    setTimeout(() => {\n      this.comTurn();\n      comBoardContainer.classList.remove(\"unclickable\");\n    }, 500);\n  }\n\n  tallySunkShip(player, ship) {\n    const { comShipsSunk, humShipsSunk, human, computer } = this.state;\n\n    const humShipsSunkDisplay = document.getElementById(\"hum-ships-sunk\"),\n      comShipsSunkDisplay = document.getElementById(\"com-ships-sunk\");\n\n    if (player === \"computer\") {\n      comShipsSunk.push(ship);\n      human.sunkShip();\n      comShipsSunkDisplay.classList.add(\"jiggle\");\n      window.setTimeout(() => {\n        comShipsSunkDisplay.classList.remove(\"jiggle\");\n      }, 1000);\n      if (human.hasWon() === true) {\n        this.winner(human);\n      }\n    } else {\n      humShipsSunk.push(ship);\n      computer.sunkShip();\n      humShipsSunkDisplay.classList.add(\"jiggle\");\n      window.setTimeout(() => {\n        humShipsSunkDisplay.classList.remove(\"jiggle\");\n      }, 1000);\n      if (computer.hasWon() === true) {\n        this.winner(computer);\n      }\n    }\n  }\n\n  comTurn() {\n    const {\n      humBoard,\n      humAircraftCarrier,\n      humBattleShip,\n      humCruiser,\n      humSubmarine,\n      humDestroyer,\n    } = this.state;\n\n    let success = true;\n    if (this.state.gameOver === false) {\n      do {\n        success = this.fire(\n          Math.floor(Math.random() * 8),\n          Math.floor(Math.random() * 8),\n          humBoard,\n          humAircraftCarrier,\n          humBattleShip,\n          humCruiser,\n          humSubmarine,\n          humDestroyer\n        );\n      } while (success === false);\n    }\n    this.setState({ message: \"Choose a target.\" });\n  }\n\n  fire(\n    y,\n    x,\n    board,\n    aircraftCarrier,\n    battleship,\n    cruiser,\n    submarine,\n    destroyer\n  ) {\n    let pointHit = false;\n\n    if (board.points[y][x] === 1 || board.points[y][x] === 2) {\n      return false;\n    } else {\n      pointHit = board.target(y, x);\n\n      this.setState({ shotsFired: this.state.shotsFired + 1 });\n\n      if (pointHit !== 0) {\n        let shipId = pointHit.split(\"\")[0];\n        let shipPoint = pointHit.split(\"\")[1];\n        console.log(shipId, shipPoint);\n        switch (shipId) {\n          case \"a\":\n            aircraftCarrier.hit(shipPoint);\n            if (aircraftCarrier.isSunk()) {\n              console.log(\"Aircraft Carrier sunk!\");\n              this.tallySunkShip(board.player, aircraftCarrier.name);\n            }\n            break;\n          case \"b\":\n            battleship.hit(shipPoint);\n            if (battleship.isSunk()) {\n              console.log(\"Battleship sunk!\");\n              this.tallySunkShip(board.player, battleship.name);\n            }\n            break;\n          case \"c\":\n            cruiser.hit(shipPoint);\n            if (cruiser.isSunk()) {\n              console.log(\"Cruiser sunk!\");\n              this.tallySunkShip(board.player, cruiser.name);\n            }\n            break;\n          case \"d\":\n            destroyer.hit(shipPoint);\n            if (destroyer.isSunk()) {\n              console.log(\"Destroyer sunk!\");\n              this.tallySunkShip(board.player, destroyer.name);\n            }\n            break;\n          case \"s\":\n            submarine.hit(shipPoint);\n            if (submarine.isSunk()) {\n              console.log(\"Submarine sunk!\");\n              this.tallySunkShip(board.player, submarine.name);\n            }\n            break;\n          default:\n            console.log(\"Some kind of error.\");\n            break;\n        }\n      }\n      return true;\n    }\n  }\n\n  winner(player) {\n    const winnerMessage = document.getElementById(\"winner-message\");\n\n    player.name === \"computer\"\n      ? this.setState(\n          { winner: \"Computer\", gameOver: true },\n          () => (winnerMessage.className = \"winner-message fade-in grow\")\n        )\n      : this.setState(\n          { winner: \"Human\", gameOver: true },\n          () => (winnerMessage.className = \"winner-message fade-in grow\")\n        );\n  }\n\n  showResult(point) {\n    if (point === 2) {\n      return (\n        <FontAwesomeIcon icon={faFireAlt} className=\"fire icon\" size=\"2x\" />\n      );\n    } else if (point === 1) {\n      return (\n        <FontAwesomeIcon\n          icon={faCrosshairs}\n          className=\"crosshairs icon\"\n          size=\"2x\"\n        />\n      );\n    }\n  }\n\n  refresh() {\n    window.location.reload();\n  }\n\n  componentDidMount() {\n    this.setup();\n  }\n\n  render() {\n    return (\n      <div id=\"full-screen\" className=\"full-screen\">\n        <h1 id=\"game-title\" className=\"title\">\n          {\"Battleship\"}\n        </h1>\n        {this.state.gameOver === false ? (\n          <div\n            id=\"main-display\"\n            className={\n              this.state.shipPlaceCount === 5\n                ? \"fade-in main-display\"\n                : \"main-display\"\n            }\n          >\n            <div id=\"information\" className=\"information\">\n              {this.state.shipPlaceCount < 5 ? (\n                <h2>\n                  Place {this.state.currentShip}{\" \"}\n                  {this.state.placementOrientation === \"h\"\n                    ? \"Horizontally\"\n                    : \"Vertically\"}\n                </h2>\n              ) : (\n                <h2>{this.state.message}</h2>\n              )}\n            </div>\n            {this.state.shipPlaceCount < 5 ? (\n              <button\n                id=\"orientation-toggle\"\n                className=\"btn\"\n                onClick={this.toggleOrientation}\n              >\n                Toggle Horiz/Vert\n              </button>\n            ) : (\n              <div id=\"orientation-toggle\"></div>\n            )}\n            {this.state.shipPlaceCount === 5 ? (\n              <div id=\"com-board-container\" className=\"board-container\">\n                <h2 id=\"com-board-name\" className=\"board-name\">\n                  {this.state.comBoard.player} board\n                </h2>\n                <div\n                  id=\"sub-com-board-container\"\n                  className=\"sub-board-container\"\n                >\n                  <div id=\"com-board\" className=\"board\">\n                    {this.state.comBoard.points.map((row, i) => {\n                      return row.map((point, j) => {\n                        return (\n                          <div\n                            className=\"point\"\n                            key={[i, j]}\n                            coord={[i, j]}\n                            onClick={this.comBoardClick}\n                          >\n                            {this.showResult(point)}\n                          </div>\n                        );\n                      });\n                    })}\n                  </div>\n                  <div id=\"com-ships-sunk\" className=\"ships-sunk\">\n                    <h3 id=\"sunk-ship-title\" className=\"sunk-ship\">\n                      Ships Sunk\n                    </h3>\n                    {this.state.comShipsSunk.map((ship) => {\n                      return (\n                        <h3 className=\"sunk-ship\" key={ship + \"com\"}>\n                          {ship} sunk!\n                        </h3>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            ) : null}\n            <div className=\"board-container\" id=\"hum-board-container\">\n              <h2 id=\"hum-board-name\" className=\"board-name\">\n                {this.state.shipPlaceCount === 5\n                  ? `${this.state.humBoard.player} board`\n                  : null}\n              </h2>\n              <div id=\"sub-hum-board-container\" className=\"sub-board-container\">\n                <div id=\"hum-board\" className=\"board\">\n                  {this.state.humBoard.points.map((row, i) => {\n                    return row.map((point, j) => {\n                      return (\n                        <div\n                          className={\n                            point !== 1 && point !== 2 && point !== 0\n                              ? \"point ship\"\n                              : \"point\"\n                          }\n                          key={[i, j]}\n                          coord={[i, j]}\n                          onClick={this.humBoardClick}\n                        >\n                          {this.showResult(point)}\n                        </div>\n                      );\n                    });\n                  })}\n                </div>\n                {this.state.shipPlaceCount === 5 ? (\n                  <div id=\"hum-ships-sunk\" className=\"ships-sunk\">\n                    <h3 id=\"sunk-ship-title\" className=\"sunk-ship\">\n                      Ships Sunk\n                    </h3>\n                    {this.state.humShipsSunk.map((ship) => {\n                      return (\n                        <h3 className=\"sunk-ship\" key={ship + \"hum\"}>\n                          {ship} sunk!\n                        </h3>\n                      );\n                    })}\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          </div>\n        ) : null}\n        <div id=\"winner-message\" className=\"winner-message hidden\">\n          <h1 id=\"winner\" className=\"winner\">\n            {`${this.state.winner} has won!`}\n          </h1>\n          <button\n            id=\"play-again\"\n            className=\"btn\"\n            onClick={() => this.refresh()}\n          >\n            play again\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}